// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.19.4
// source: protos/vector.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	TextVector_ConvertVector_FullMethodName = "/TextVector/convertVector"
)

// TextVectorClient is the client API for TextVector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextVectorClient interface {
	ConvertVector(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error)
}

type textVectorClient struct {
	cc grpc.ClientConnInterface
}

func NewTextVectorClient(cc grpc.ClientConnInterface) TextVectorClient {
	return &textVectorClient{cc}
}

func (c *textVectorClient) ConvertVector(ctx context.Context, in *ConvertRequest, opts ...grpc.CallOption) (*ConvertResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertResponse)
	err := c.cc.Invoke(ctx, TextVector_ConvertVector_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TextVectorServer is the server API for TextVector service.
// All implementations must embed UnimplementedTextVectorServer
// for forward compatibility
type TextVectorServer interface {
	ConvertVector(context.Context, *ConvertRequest) (*ConvertResponse, error)
	mustEmbedUnimplementedTextVectorServer()
}

// UnimplementedTextVectorServer must be embedded to have forward compatible implementations.
type UnimplementedTextVectorServer struct {
}

func (UnimplementedTextVectorServer) ConvertVector(context.Context, *ConvertRequest) (*ConvertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertVector not implemented")
}
func (UnimplementedTextVectorServer) mustEmbedUnimplementedTextVectorServer() {}

// UnsafeTextVectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextVectorServer will
// result in compilation errors.
type UnsafeTextVectorServer interface {
	mustEmbedUnimplementedTextVectorServer()
}

func RegisterTextVectorServer(s grpc.ServiceRegistrar, srv TextVectorServer) {
	s.RegisterService(&TextVector_ServiceDesc, srv)
}

func _TextVector_ConvertVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TextVectorServer).ConvertVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TextVector_ConvertVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TextVectorServer).ConvertVector(ctx, req.(*ConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TextVector_ServiceDesc is the grpc.ServiceDesc for TextVector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextVector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TextVector",
	HandlerType: (*TextVectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "convertVector",
			Handler:    _TextVector_ConvertVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/vector.proto",
}
